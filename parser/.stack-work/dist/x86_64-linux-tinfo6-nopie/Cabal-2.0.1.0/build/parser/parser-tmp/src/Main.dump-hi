
==================== FINAL INTERFACE ====================
2018-03-15 21:13:20.522450094 UTC

interface main:Main 8022
  interface hash: 593cb87d67aa42805248aa3f99812711
  ABI hash: 4d09162518043fe09664ccd6502a4fb3
  export-list hash: 4a69ee4342f9974d4c2df96777430d61
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b6a232cc7e8a621ac141bd65c3cfed30
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.add
  Main.evaluate
  Main.identifier
  Main.main
  Main.number
  Main.opToChar
  Main.operator
  Main.parse
  Main.rev
  Main.squares
  Main.test
  Main.tokenize
  Main.vals
  Main.Expression
  Main.Operator{Main.Div Main.Minus Main.Plus Main.Times}
  Main.Test{Main.Test}
  Main.Token{Main.TokAssign Main.TokEnd Main.TokIdent Main.TokLParen Main.TokNum Main.TokOp Main.TokRParen}
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 safe-0.3.17
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Char fe4e3458190deeac19969ce15e33bed9
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:GHC.Unicode 49c9de4fffed0d9be65aaeb6a60b757c
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  base-4.10.1.0:Text.Read 9e862e012b3c71e83cb56fb456188f44
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
import  -/  safe-0.3.17:Safe 3059fdb9d3ef76f28d3bc0e2aec6e280
3cd678f98ce28fb1391bdcbedabe9bc8
  $fEqOperator :: GHC.Classes.Eq Main.Operator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Operator Main.$fEqOperator_$c== Main.$fEqOperator_$c/= -}
3cd678f98ce28fb1391bdcbedabe9bc8
  $fEqOperator_$c/= ::
    Main.Operator -> Main.Operator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.Operator) (b :: Main.Operator) ->
                 case a of wild {
                   Main.Plus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Plus -> GHC.Types.False }
                   Main.Minus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Minus -> GHC.Types.False }
                   Main.Times
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Times -> GHC.Types.False }
                   Main.Div
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Div -> GHC.Types.False } }) -}
3cd678f98ce28fb1391bdcbedabe9bc8
  $fEqOperator_$c== ::
    Main.Operator -> Main.Operator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.Operator) (ds1 :: Main.Operator) ->
                 case ds of wild {
                   Main.Plus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Plus -> GHC.Types.True }
                   Main.Minus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Minus -> GHC.Types.True }
                   Main.Times
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Times -> GHC.Types.True }
                   Main.Div
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Div -> GHC.Types.True } }) -}
6e1ec67433332257dc5fc7eb90bd88b6
  $fEqToken :: GHC.Classes.Eq Main.Token
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Token Main.$fEqToken_$c== Main.$fEqToken_$c/= -}
6e1ec67433332257dc5fc7eb90bd88b6
  $fEqToken_$c/= :: Main.Token -> Main.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Token) (b :: Main.Token) ->
                 case Main.$fEqToken_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6e1ec67433332257dc5fc7eb90bd88b6
  $fEqToken_$c== :: Main.Token -> Main.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.Token) (ds1 :: Main.Token) ->
                 case ds of wild {
                   Main.TokOp a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.TokOp b1 -> Main.$fEqOperator_$c== a1 b1 }
                   Main.TokAssign
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.TokAssign -> GHC.Types.True }
                   Main.TokLParen
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.TokLParen -> GHC.Types.True }
                   Main.TokRParen
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.TokRParen -> GHC.Types.True }
                   Main.TokIdent a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.TokIdent b1 -> GHC.Base.eqString a1 b1 }
                   Main.TokNum a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.TokNum b1 -> GHC.Classes.eqDouble a1 b1 }
                   Main.TokEnd
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.TokEnd -> GHC.Types.True } }) -}
3cd678f98ce28fb1391bdcbedabe9bc8
  $fShowOperator :: GHC.Show.Show Main.Operator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Operator
                  Main.$fShowOperator_$cshowsPrec
                  Main.$fShowOperator_$cshow
                  Main.$fShowOperator_$cshowList -}
5ef2b4722f8157f41027f3b1ef9cfa44
  $fShowOperator1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowOperator2) -}
d339e9de6e6448d7b6190257a22cf2c3
  $fShowOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Div"#) -}
3814f76f03ccfdd4eb059d0e1edcdb6b
  $fShowOperator3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowOperator4) -}
8181bf097dc61d911ea1650c5dd0e48a
  $fShowOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Times"#) -}
a27ac498354884ad48e73b9084c59f55
  $fShowOperator5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowOperator6) -}
623d8108c57ebe430fdad071353e983c
  $fShowOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Minus"#) -}
766f8d1e29c813caaa0d63c034c9114f
  $fShowOperator7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowOperator8) -}
d6b94e784f0bc6f4871d515e77cf772b
  $fShowOperator8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Plus"#) -}
3cd678f98ce28fb1391bdcbedabe9bc8
  $fShowOperator_$cshow :: Main.Operator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Operator) ->
                 case x of wild {
                   Main.Plus -> Main.$fShowOperator7
                   Main.Minus -> Main.$fShowOperator5
                   Main.Times -> Main.$fShowOperator3
                   Main.Div -> Main.$fShowOperator1 }) -}
3cd678f98ce28fb1391bdcbedabe9bc8
  $fShowOperator_$cshowList :: [Main.Operator] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Operator
                   Main.$w$cshowsPrec) -}
3cd678f98ce28fb1391bdcbedabe9bc8
  $fShowOperator_$cshowsPrec ::
    GHC.Types.Int -> Main.Operator -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Operator)
                   (w2 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec w1 w2) -}
a17abc86b6aed42dffdac984afda1530
  $fShowTest :: GHC.Show.Show Main.Test
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Test
                  Main.$fShowTest_$cshowsPrec
                  Main.$fShowTest_$cshow
                  Main.$fShowTest_$cshowList -}
a17abc86b6aed42dffdac984afda1530
  $fShowTest1 :: Main.Test -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><L,U>,
     Unfolding: (\ (w :: Main.Test) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Test ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec1 0# ww1 ww2 ww3 w1 }) -}
0883e6411e02fea316f7b7d11a999e5e
  $fShowTest2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test "#) -}
a17abc86b6aed42dffdac984afda1530
  $fShowTest_$cshow :: Main.Test -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Test) ->
                 case w of ww { Main.Test ww1 ww2 ww3 ->
                 Main.$w$cshow ww1 ww2 ww3 }) -}
a17abc86b6aed42dffdac984afda1530
  $fShowTest_$cshowList :: [Main.Test] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Test Main.$fShowTest1) -}
a17abc86b6aed42dffdac984afda1530
  $fShowTest_$cshowsPrec ::
    GHC.Types.Int -> Main.Test -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Test)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Test ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 ww5 w2 } }) -}
6e1ec67433332257dc5fc7eb90bd88b6
  $fShowToken :: GHC.Show.Show Main.Token
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Token
                  Main.$fShowToken_$cshowsPrec
                  Main.$fShowToken_$cshow
                  Main.$fShowToken_$cshowList -}
6e1ec67433332257dc5fc7eb90bd88b6
  $fShowToken1 :: Main.Token -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Main.$fShowToken_$cshowsPrec Main.$fShowToken2) -}
ebad2823196f7bf25b66f142fe818dbe
  $fShowToken10 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Main.$fShowToken11) -}
c949f3fe74d00e9d0c86285f843e4324
  $fShowToken11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowToken12) -}
ac2c0b6222aec839036954922a4b98bb
  $fShowToken12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TokRParen"#) -}
0a8e626c1ceb1deb27871643180b920d
  $fShowToken13 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Main.$fShowToken14) -}
367e2c21ce9fbcf3caac6aa4070e1fa1
  $fShowToken14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowToken15) -}
73baf755f973e5fe4ce90e0e52098805
  $fShowToken15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TokLParen"#) -}
f519aae9bbf0c9f4d242e1942c0e6dd3
  $fShowToken16 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Main.$fShowToken17) -}
b182ff2c6e3c0f6bc1d8fc1b207f5671
  $fShowToken17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowToken18) -}
bcd128b53005ac03eb6d377bb6f6f0e9
  $fShowToken18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TokAssign"#) -}
778836fbe72b8d7cba887d0129be6c6e
  $fShowToken19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowToken20) -}
277fed0d3dbcfae1baedf57a98fbdbbc
  $fShowToken2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
a4d20ae6430e1c5ae6a0d1b1f6e4c2e8
  $fShowToken20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TokOp "#) -}
e8d078d77ae32147d350e35ad8d4fe13
  $fShowToken21 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2358e23674deb235330e3cfb80ad1fa6
  $fShowToken3 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Main.$fShowToken4) -}
f64190c76fae4d200f6e422a5720e531
  $fShowToken4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowToken5) -}
ded99966ec9f042c006e95310b1a6431
  $fShowToken5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TokEnd"#) -}
75a6790e4f45a95c8ec713026b95cd91
  $fShowToken6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowToken7) -}
eb62f2a03f4f85878c579dd8831e75d4
  $fShowToken7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TokNum "#) -}
b59bc05f3207d5d6b9e27b214ae09703
  $fShowToken8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
169001311a5ec5efad56b2415792c1bd
  $fShowToken9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TokIdent "#) -}
6e1ec67433332257dc5fc7eb90bd88b6
  $fShowToken_$cshow :: Main.Token -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Main.Token) ->
                 case x of wild {
                   Main.TokOp b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowToken19
                        (Main.$w$cshowsPrec b1 (GHC.Types.[] @ GHC.Types.Char))
                   Main.TokAssign -> Main.$fShowToken17
                   Main.TokLParen -> Main.$fShowToken14
                   Main.TokRParen -> Main.$fShowToken11
                   Main.TokIdent b1
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowToken9
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Main.$fShowToken21))
                   Main.TokNum b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowToken6
                        (case b1 of ww { GHC.Types.D# ww1 ->
                         GHC.Float.$w$sshowSignedFloat
                           GHC.Float.$fShowDouble2
                           Main.$fShowToken8
                           ww1
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Main.TokEnd -> Main.$fShowToken4 }) -}
6e1ec67433332257dc5fc7eb90bd88b6
  $fShowToken_$cshowList :: [Main.Token] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Token Main.$fShowToken1) -}
6e1ec67433332257dc5fc7eb90bd88b6
  $fShowToken_$cshowsPrec ::
    GHC.Types.Int -> Main.Token -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Main.Token) ->
                 case ds of wild {
                   Main.TokOp b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowToken19
                             (Main.$w$cshowsPrec b1 x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowToken19
                                (Main.$w$cshowsPrec
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Main.TokAssign -> Main.$fShowToken16
                   Main.TokLParen -> Main.$fShowToken13
                   Main.TokRParen -> Main.$fShowToken10
                   Main.TokIdent b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Main.$fShowToken9
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x1)))
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Main.$fShowToken9
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            x1))))) } }
                   Main.TokNum b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { GHC.Types.D# ww1 ->
                          GHC.Float.$w$sshowSignedFloat
                            GHC.Float.$fShowDouble2
                            Main.$fShowToken8
                            ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Main.$fShowToken6 (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowToken6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Main.TokEnd -> Main.$fShowToken3 }) -}
d085f6dc742e41cd3cd0b1ccca16c7a6
  $tc'Div :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11645750416555189232##
                   3813003399367813461##
                   Main.$trModule
                   Main.$tc'Div2
                   0#
                   Main.$tc'Div1) -}
3d773ec04a324207cc6b237aa9df1e95
  $tc'Div1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e867edb4989ec01757ce999055ca0cb0
  $tc'Div2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Div3) -}
c5118a5baf6096b42d7db6495e897bfa
  $tc'Div3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Div"#) -}
651fc7e55f4b2538e41b298460d609f6
  $tc'Minus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16263184872174723805##
                   16745620267940386539##
                   Main.$trModule
                   Main.$tc'Minus1
                   0#
                   Main.$tc'Div1) -}
df57ef16207ba98ff4b323ce5fa1adec
  $tc'Minus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Minus2) -}
7dd071dec65b6518a098bdf3b6222566
  $tc'Minus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Minus"#) -}
7fd990fd3d1463e5092f359924d74c5a
  $tc'Plus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8170225512942515170##
                   11280510069790138749##
                   Main.$trModule
                   Main.$tc'Plus1
                   0#
                   Main.$tc'Div1) -}
d20d3e81deb948b305c87c9e8f7b714c
  $tc'Plus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Plus2) -}
fec8e835eada50a6e976e2febd0dc117
  $tc'Plus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Plus"#) -}
504fb29658790da349e43ab8fa273014
  $tc'Test :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5553125282100972328##
                   18312921150889147092##
                   Main.$trModule
                   Main.$tc'Test2
                   0#
                   Main.$tc'Test1) -}
c7650ab0c6f22748933b3d21cf3fab43
  $tc'Test1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d5a08799437444175ae27b8e2ac08f61
  $tc'Test2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Test3) -}
eb724d8ca020017dad14f6012042de30
  $tc'Test3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Test"#) -}
c3f2d96d924e048028f954b6597f778a
  $tc'Times :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9400277939093399351##
                   15368898918807544611##
                   Main.$trModule
                   Main.$tc'Times1
                   0#
                   Main.$tc'Div1) -}
786d4d51e2a5ee5d168a6cb8a29e42a6
  $tc'Times1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Times2) -}
500a52cc32771ef5a01bde773de77f4f
  $tc'Times2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Times"#) -}
63da12a72877e0d0af1f15a0aead2375
  $tc'TokAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9512579244333205402##
                   3275847724835737738##
                   Main.$trModule
                   Main.$tc'TokAssign2
                   0#
                   Main.$tc'TokAssign1) -}
f9153b47a175d035d7a64832358e08da
  $tc'TokAssign1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
b78be62b267c18058243977cc8188da5
  $tc'TokAssign2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TokAssign3) -}
3af1b1064e9aa76d85e66002eaaa52b4
  $tc'TokAssign3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TokAssign"#) -}
12be5d633a7e77c0d9dd2f1d0bce087f
  $tc'TokEnd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7238889683788237694##
                   9999397475595345829##
                   Main.$trModule
                   Main.$tc'TokEnd1
                   0#
                   Main.$tc'TokAssign1) -}
e39e728b22d2d2cb41f0bf4152028a9d
  $tc'TokEnd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TokEnd2) -}
f674ae7fefffd8794cb1802ce196f2a5
  $tc'TokEnd2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TokEnd"#) -}
6989156b3c95535ea739cb39114315cd
  $tc'TokIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17382564479403220275##
                   5542416309568844326##
                   Main.$trModule
                   Main.$tc'TokIdent2
                   0#
                   Main.$tc'TokIdent1) -}
d9c6321cd6c19f651d43bbbcadca261e
  $tc'TokIdent1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
536b4139763304b495d9e5b33fa4eb86
  $tc'TokIdent2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TokIdent3) -}
b6aa038c24aab838f6d05a6d40d800eb
  $tc'TokIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TokIdent"#) -}
472559a614d2a334cf0dfb9c7498797d
  $tc'TokLParen :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5509773708918306058##
                   12980953410894553715##
                   Main.$trModule
                   Main.$tc'TokLParen1
                   0#
                   Main.$tc'TokAssign1) -}
da88b59c6f4f95b26f23e251793ded5b
  $tc'TokLParen1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TokLParen2) -}
3a48d3e372b2e16a17695d2ffdd26c16
  $tc'TokLParen2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TokLParen"#) -}
0c909c98b7ad09e612f9562fcc88c27c
  $tc'TokNum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18179361900769636270##
                   10893269453429714770##
                   Main.$trModule
                   Main.$tc'TokNum2
                   0#
                   Main.$tc'TokNum1) -}
c81338000d09a709b73d28ca18a3e7d1
  $tc'TokNum1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7e670367dfdbf895beeff0e271d93285
  $tc'TokNum2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TokNum3) -}
566861cb8f30db66e227da1aff3c8ff8
  $tc'TokNum3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TokNum"#) -}
32cb3667aeea45fb1fbe1700e53a60d1
  $tc'TokOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14683409280243351438##
                   14173858892473656675##
                   Main.$trModule
                   Main.$tc'TokOp2
                   0#
                   Main.$tc'TokOp1) -}
f6e48c5d41ef43d3fc096ec8efea17be
  $tc'TokOp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
982c0617b9d6a5d2d648a6128773b5c4
  $tc'TokOp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TokOp3) -}
4ce1815a6ee6cb887713e94b436f4045
  $tc'TokOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TokOp"#) -}
59ad26cf1d056695e580f653bbf0e4b1
  $tc'TokRParen :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5974042555702507124##
                   14045662351250019043##
                   Main.$trModule
                   Main.$tc'TokRParen1
                   0#
                   Main.$tc'TokAssign1) -}
1e4a50a1ef3cf3b80dd15e8c09716c41
  $tc'TokRParen1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TokRParen2) -}
ca8ab64d931623cc12da377d5a7d3b8b
  $tc'TokRParen2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TokRParen"#) -}
d9e3ef02bea0d7af78115f6bcc0c88b3
  $tcExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15845717741383482403##
                   6621183631728291930##
                   Main.$trModule
                   Main.$tcExpression1
                   0#
                   GHC.Types.krep$*) -}
416b2bfc3f301fd3e9c7c60dbba8c4a6
  $tcExpression1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcExpression2) -}
de99df2916ef11a2d51801782625a962
  $tcExpression2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expression"#) -}
d2a48532d6df8802b39ee01c274aa5dc
  $tcOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14357504847454082350##
                   17659542232293526565##
                   Main.$trModule
                   Main.$tcOperator1
                   0#
                   GHC.Types.krep$*) -}
34ff4363d30b2abd8fb9aaa7a2079e5e
  $tcOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcOperator2) -}
c843c16d26fcb9348f9b9b3411e0716e
  $tcOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Operator"#) -}
d7205d098ea746beb7b5d062c4f6c35d
  $tcTest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6965455134039711551##
                   4421873061210318108##
                   Main.$trModule
                   Main.$tcTest1
                   0#
                   GHC.Types.krep$*) -}
5faf3aef2aea448cd7f29276e29f6682
  $tcTest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcTest2) -}
3fb4714e1ff663d110d07322ac3c23b4
  $tcTest2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test"#) -}
25488310338e413c9949b8f69c2051ea
  $tcToken :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7314202970098702604##
                   11629948393857996392##
                   Main.$trModule
                   Main.$tcToken1
                   0#
                   GHC.Types.krep$*) -}
3f497538619b26361cf640af1aa4019f
  $tcToken1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcToken2) -}
8eccb0b68c7db6455343c3b5bb52d925
  $tcToken2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Token"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
fc813d75a29292aa30475ff359884cbb
  $w$cshow ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowTest2
                   (case GHC.Show.$w$cshowsPrec4
                           11#
                           ww
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (case GHC.Show.$w$cshowsPrec4
                                      11#
                                      ww1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (case GHC.Show.$w$cshowsPrec4
                                                 11#
                                                 ww2
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww3 { (#,#) ww4 ww5 ->
                                          GHC.Types.:
                                            @ GHC.Types.Char
                                            ww4
                                            ww5 })) of ww3 { (#,#) ww4 ww5 ->
                               GHC.Types.: @ GHC.Types.Char ww4 ww5 })) of ww3 { (#,#) ww4 ww5 ->
                    GHC.Types.: @ GHC.Types.Char ww4 ww5 })) -}
3cd678f98ce28fb1391bdcbedabe9bc8
  $w$cshowsPrec ::
    Main.Operator -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Main.Operator) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Main.Plus -> GHC.Base.++ @ GHC.Types.Char Main.$fShowOperator7 w1
                   Main.Minus -> GHC.Base.++ @ GHC.Types.Char Main.$fShowOperator5 w1
                   Main.Times -> GHC.Base.++ @ GHC.Types.Char Main.$fShowOperator3 w1
                   Main.Div
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowOperator1 w1 }) -}
e0cfc3fdec4364d473e2c16fc44f1287
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: GHC.Integer.Type.Integer)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Main.$fShowTest2
                       (case GHC.Show.$w$cshowsPrec4
                               11#
                               ww1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case GHC.Show.$w$cshowsPrec4
                                          11#
                                          ww2
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (case GHC.Show.$w$cshowsPrec4
                                                     11#
                                                     ww3
                                                     x of ww4 { (#,#) ww5 ww6 ->
                                              GHC.Types.:
                                                @ GHC.Types.Char
                                                ww5
                                                ww6 })) of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww5
                                     ww6 })) of ww4 { (#,#) ww5 ww6 ->
                        GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
7fc168dc554a80ca333ec1296e84600c
  $wnumber ::
    GHC.Types.Char -> GHC.Base.String -> (# Main.Token, [Main.Token] #)
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Char) (w1 :: GHC.Base.String) ->
                 let {
                   ds :: ([GHC.Types.Char], [GHC.Types.Char])
                   = case GHC.List.$wspan
                            @ GHC.Types.Char
                            GHC.Unicode.isDigit
                            w1 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# Main.TokNum
                      (case Text.Read.readEither8
                              @ GHC.Types.Double
                              (Text.ParserCombinators.ReadP.run
                                 @ GHC.Types.Double
                                 Main.number3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    w
                                    (case ds of wild { (,) digs cs' -> digs }))) of wild {
                         [] -> Main.number2
                         : x ds1
                         -> case ds1 of wild1 { [] -> x : ipv ipv1 -> Main.number1 } }),
                    case ds of wild { (,) digs cs' -> Main.tokenize cs' } #)) -}
5a3abcba89a712963789cfe338ad50ab
  data Expression
3cd678f98ce28fb1391bdcbedabe9bc8
  data Operator = Plus | Minus | Times | Div
a17abc86b6aed42dffdac984afda1530
  data Test
    = Test GHC.Integer.Type.Integer
           GHC.Integer.Type.Integer
           GHC.Integer.Type.Integer
6e1ec67433332257dc5fc7eb90bd88b6
  data Token
    = TokOp Main.Operator
    | TokAssign
    | TokLParen
    | TokRParen
    | TokIdent GHC.Base.String
    | TokNum GHC.Types.Double
    | TokEnd
d7e466e0a27e75a19e0c924e9e747443
  add :: (GHC.Num.Num b, GHC.Classes.Ord b) => [b] -> [b] -> [b]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))><L,U(A,A,C(C1(U)),A,A,A,A,A)><S,1*U><L,U>,
     Unfolding: (\ @ b
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   (xs :: [b])
                   (ys :: [b]) ->
                 let {
                   lvl5 :: b = GHC.Num.fromInteger @ b $dNum Main.add1
                 } in
                 letrec {
                   go :: [b] -> [b] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [b]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ b
                       : y ys1
                       -> case GHC.Classes.< @ b $dOrd y lvl5 of wild1 {
                            GHC.Types.False
                            -> let {
                                 z :: [b] = go ys1
                               } in
                               letrec {
                                 go1 :: [b] -> [b] {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (ds1 :: [b]) ->
                                   case ds1 of wild2 {
                                     [] -> z
                                     : y1 ys2
                                     -> case GHC.Classes.< @ b $dOrd y1 lvl5 of wild3 {
                                          GHC.Types.False
                                          -> GHC.Types.: @ b (GHC.Num.+ @ b $dNum y y1) (go1 ys2)
                                          GHC.Types.True -> go1 ys2 } }
                               } in
                               go1 ys
                            GHC.Types.True -> go ys1 } }
                 } in
                 go xs) -}
d4a714e1a9f67af49091fc415df05652
  add1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
37f66a0e0eb184ea72741706fc5551ad
  evaluate :: Main.Expression -> GHC.Types.Double
  {- Strictness: x -}
147264d9366811b374c492779853efa3
  identifier :: GHC.Types.Char -> GHC.Base.String -> [Main.Token]
  {- Arity: 2, Strictness: <L,U><L,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Char) (w1 :: GHC.Base.String) ->
                 let {
                   ds :: ([GHC.Types.Char], [GHC.Types.Char])
                   = case GHC.List.$wspan
                            @ GHC.Types.Char
                            GHC.Unicode.isAlphaNum
                            w1 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 GHC.Types.:
                   @ Main.Token
                   (Main.TokIdent
                      (GHC.Types.:
                         @ GHC.Types.Char
                         w
                         (case ds of wild { (,) str cs' -> str })))
                   (case ds of wild { (,) str cs' -> Main.tokenize cs' })) -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
416b262207a45fba9b87cef02e265fca
  number :: GHC.Types.Char -> GHC.Base.String -> [Main.Token]
  {- Arity: 2, Strictness: <L,U><L,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Char) (w1 :: GHC.Base.String) ->
                 case Main.$wnumber w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Main.Token ww1 ww2 }) -}
1503503ad77d78740a1708f590c8cf7e
  number1 :: GHC.Types.Double
  {- Strictness: x -}
9fcdd508066eb8cb0259d76961ddb49d
  number2 :: GHC.Types.Double
  {- Strictness: x -}
c5e764c35bd9a02c4f0fde9be595efc3
  number3 :: Text.ParserCombinators.ReadP.P GHC.Types.Double
  {- Unfolding: (GHC.Read.$fReadDouble_$sreadNumber
                   GHC.Read.$fReadDouble_$sconvertFrac
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Double
                   (Text.Read.readEither7 @ GHC.Types.Double)) -}
a2b431df37407bc7b7105fa7634f4da0
  opToChar :: Main.Operator -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Operator) ->
                 case ds of wild {
                   Main.Plus -> Main.opToChar4
                   Main.Minus -> Main.opToChar3
                   Main.Times -> Main.opToChar2
                   Main.Div -> Main.opToChar1 }) -}
2697daa586f40ba199d4e9517b1fa14b
  opToChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '/'#) -}
c4f45d55443e3385d4150fbeb42abf4f
  opToChar2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '*'#) -}
1b97172ab8811de882177d1660961e34
  opToChar3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '-'#) -}
a920d68368efb6d9b709dfd2f116475d
  opToChar4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '+'#) -}
8ab6db7c1853f92b80c2fb7013987392
  operator :: GHC.Types.Char -> Main.Operator
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: GHC.Types.Char) ->
                 case c of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> Main.operator1
                   '*'# -> Main.Times
                   '+'# -> Main.Plus
                   '-'# -> Main.Minus
                   '/'# -> Main.Div } }) -}
19f3d9fc463b4ac4f42522931e3f35a9
  operator1 :: Main.Operator
  {- Strictness: x -}
3d1ce4b6562c509ecd849732f3eae783
  parse :: [Main.Token] -> Main.Expression
  {- Strictness: x -}
34c3c2250f1b2a4a470a43c322bff6d3
  rev :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 GHC.List.foldl @ a @ [a] (Main.rev1 @ a) (GHC.Types.[] @ a)) -}
be5953c99a07d5d771e606eb377a493b
  rev1 :: [a] -> a -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (acc :: [a]) (x :: a) -> GHC.Types.: @ a x acc) -}
29efbb37b1964bdae60507127e8c80cd
  squares :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.List.foldl
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Main.squares1
                   Main.$fShowToken2) -}
6a561d3832fb314646eb477be0cb34ca
  squares1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (acc :: GHC.Types.Int) (x :: GHC.Types.Int) ->
                 case acc of wild { GHC.Types.I# x1 ->
                 case x of wild1 { GHC.Types.I# x2 ->
                 GHC.Types.I# (GHC.Prim.+# x1 (GHC.Prim.*# x2 x2)) } }) -}
59f2b9ba3605720ce138b19e8ca3422c
  test :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.test1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
4df3b28a476cd459f838c795faf0944f
  test1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.test4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.test2
                   GHC.Types.True
                   ipv }) -}
0734747d81b9d048bc6d2a2c2fe22d20
  test2 :: GHC.Base.String
  {- Unfolding: (Data.Monoid.$fShowLast_$cshow
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   Main.test3) -}
947b7cc7d2ce7705a6334b4d1e6b20a4
  test3 :: Data.Monoid.Last GHC.Types.Int
  {- Unfolding: (Data.Monoid.$fMonoidLast_go
                   @ GHC.Types.Int
                   Main.vals
                     `cast`
                   ([Sym (Data.Monoid.N:Last[0]) <GHC.Types.Int>_N])_R) -}
fdc4655978c6b43fedea9b6e0e7527ae
  test4 :: GHC.Base.String
  {- Unfolding: (Data.Monoid.$fShowFirst_$cshow
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   Main.test5) -}
2170cd4f5d0c132e5391d4860f608d62
  test5 :: Data.Monoid.First GHC.Types.Int
  {- Unfolding: (Data.Monoid.$fMonoidFirst_go
                   @ GHC.Types.Int
                   Main.vals
                     `cast`
                   ([Sym (Data.Monoid.N:First[0]) <GHC.Types.Int>_N])_R) -}
99e8c7874eb2e4ba78900cc6dc921cac
  tokenize :: GHC.Base.String -> [Main.Token]
  {- Arity: 1, Strictness: <S,1*U> -}
d8cb28b1f3da6bc32fd291ac0d08b3aa
  vals :: [GHC.Base.Maybe GHC.Types.Int]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.vals13
                   Main.vals1) -}
b78facd881994df1fd13d852d4c241f3
  vals1 :: [GHC.Base.Maybe GHC.Types.Int]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.vals10
                   Main.vals2) -}
b32165bd09c26f279b98428d1c196249
  vals10 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (case Safe.readEitherSafe
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        Main.vals11 of wild {
                   Data.Either.Left x1 -> GHC.Base.Nothing @ GHC.Types.Int
                   Data.Either.Right y -> GHC.Base.Just @ GHC.Types.Int y }) -}
67656c01c88bb4121c3ab84a5247d70e
  vals11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.vals12) -}
bd7d52df0f3cccbf257502eb045847b3
  vals12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1"#) -}
33ff2fb824acbfd9af6c333137681a67
  vals13 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (case Safe.readEitherSafe
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        Main.vals14 of wild {
                   Data.Either.Left x1 -> GHC.Base.Nothing @ GHC.Types.Int
                   Data.Either.Right y -> GHC.Base.Just @ GHC.Types.Int y }) -}
2e7e3d99661502d334c3a2a46113fc36
  vals14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.vals15) -}
e1619d5b350a358ed3721bd550ea79dc
  vals15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ignored"#) -}
0364968238f15a5e52b96e8f55671fe5
  vals2 :: [GHC.Base.Maybe GHC.Types.Int]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.vals7
                   Main.vals3) -}
1878b5c802e8661958b19df8ffcb20c7
  vals3 :: [GHC.Base.Maybe GHC.Types.Int]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.vals4
                   (GHC.Types.[] @ (GHC.Base.Maybe GHC.Types.Int))) -}
c7e86b675d12f4c4a41b5d76211144df
  vals4 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (case Safe.readEitherSafe
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        Main.vals5 of wild {
                   Data.Either.Left x1 -> GHC.Base.Nothing @ GHC.Types.Int
                   Data.Either.Right y -> GHC.Base.Just @ GHC.Types.Int y }) -}
85b1ba65b492f166c1304883cec9250a
  vals5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.vals6) -}
75175202e91e45fb25663d1da2ee7291
  vals6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("10"#) -}
4e385a2e05aa1d3a5be444c63980187f
  vals7 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (case Safe.readEitherSafe
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        Main.vals8 of wild {
                   Data.Either.Left x1 -> GHC.Base.Nothing @ GHC.Types.Int
                   Data.Either.Right y -> GHC.Base.Just @ GHC.Types.Int y }) -}
3c3e65ab066644587a461b8ea58fc6d2
  vals8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.vals9) -}
6ee1d7d292fc4eff764a19ad20da9177
  vals9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("5"#) -}
instance [safe] GHC.Classes.Eq [Main.Operator] = Main.$fEqOperator
instance [safe] GHC.Classes.Eq [Main.Token] = Main.$fEqToken
instance [safe] GHC.Show.Show [Main.Operator] = Main.$fShowOperator
instance [safe] GHC.Show.Show [Main.Test] = Main.$fShowTest
instance [safe] GHC.Show.Show [Main.Token] = Main.$fShowToken
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

